// Buttons
$button-sizes: "sm", "lg";

$button-colors: (
  "blue": $blue,
);

@mixin button-effects($bg) {
  background-color: $bg;
  border-color: transparent;
  color: $white;

  @include hover-focus {
    background-color: saturate(darken($bg, 5), 10);
  }
}

// Buttons
@mixin button-reset() {
  font-size: 1rem;
  background-color: transparent;
  border: 0;
  display: inline-block;
  -webkit-appearance: none;
  user-select: none;
  cursor: pointer;
}

@mixin button-size($size) {
  margin: auto;
  padding: 0.5rem 1.25rem;
  letter-spacing: 0.025rem;

  @if $size == "lg" {
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
  } @else if $size == "sm" {
    font-size: 0.7rem;
  } @else {
    font-size: 0.8rem;
  }
}

@mixin button-outline($color: $link-color) {
  color: $color;
  background-color: transparent;
  border: 1px solid;
}

@mixin button($size: '', $bg: $link-color, $outline-color: "") {
  @include button-reset;
  @include button-size($size);
  align-items: center;
  font-family: $ff-sans;
  font-weight: 700;
  text-align: center;
  text-transform: uppercase;
  @if $bg == "outline" {
    @include button-outline($outline-color);
  } @else {
    @include button-effects($bg);
  }
}

button {
  @include button-reset;
}

button[disabled],
[type="button"][disabled] {
  @include button-reset;
  opacity: 0.25;
}

.button {
  @include button;
  @each $size in $button-sizes {
    &.#{$size} {
      @include button-size($size);
    }
  }
  @each $name, $bg in $button-colors {
    &.#{$name} {
      @include button-effects($bg);
      @if $name == "white" {
        color: $blue-dark;
      }
    }
  }

  &.outline {
    @include button-outline();
  }

  @each $name, $color in $button-colors {
    &.outline.#{$name} {
      @include button-outline($color);
    }
  }

  &.empty {
    padding-right: $baseline / 2;
    padding-left: $baseline / 2;
    color: $link-color;
    background-color: transparent;
  }

  &+& {
    margin-left: $baseline / 3;
  }
}
