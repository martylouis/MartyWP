// Clearfix
@mixin clearfix() {
  &::after {
    display: block;
    content: "";
    clear: both;
  }
}

// Hide Text
@mixin text-hide() {
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
}

// Antialias text
@mixin antialias-text {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -moz-font-feature-settings: 'liga', 'kern';
  text-rendering: optimizeLegibility;
  font-synthesis: none;
}

// Media queries
@mixin media-min($size) {
  @media screen and (min-width: $size) {
    @content;
  }
}

@mixin media-max($size) {
  @media screen and (max-width: ($size - 1)) {
    @content;
  }
}

@mixin media-min-max($min, $max) {
  @media screen and (min-width: $min) and (max-width: ($max - 1)) {
    @content;
  }
}

// Flex Container
@mixin flex-container($flow: row wrap) {
  display: flex;
  flex-flow: $flow;
  box-sizing: border-box;
}


// hover/focus
@mixin hover-focus {
  &:hover,
  &:focus {
    @content;
  }
}

// Fluid Sizing
@mixin fluid($properties, $min-vw, $max-vw, $min-value, $max-value) {
  @each $property in $properties {
		#{$property}: $min-value;
	}

	@media screen and (min-width: $min-vw) {
		@each $property in $properties {
			#{$property}: calc(#{$min-value} + #{strip_unit($max-value - $min-value)} * ((100vw - #{$min-vw}) / #{strip_unit($max-vw - $min-vw)}));
		}
	}

	@media screen and (min-width: $max-vw) {
		@each $property in $properties {
			#{$property}: $max-value;
		}
	}
}
